name: GH Docker build and test GPU legate.core

concurrency:
  group: ci-docker-gpu-on-${{ github.event_name }}-from-${{ github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches:
      - "pull-request/[0-9]+"
      - "branch-*"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: legate.core

jobs:
  build-gpu:
    permissions:
      id-token: write # This is required for configure-aws-credentials
      contents: read  # This is required for actions/checkout
      packages: write # This is required to push docker image to ghcr.io

    runs-on: ${{ github.repository == 'nv-legate/legate.core' && 'linux-amd64-cpu4' || 'ubuntu-latest' }}
    steps:
      - name: Checkout legate.core (= this repo)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get AWS credentials for sccache bucket
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-2
          role-duration-seconds: 28800 # 8 hours
          role-to-assume: arn:aws:iam::279114543810:role/gha-oidc-nv-legate

      - name: Build docker image
        run: |
          docker build \
            --progress=plain \
            --tag=$IMAGE_NAME \
            --label "git-commit=${{github.sha}}" \
            -f continuous_integration/Dockerfile .
      
      - name: Log in to container image registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: Use docker image to build legate.core
        run: |
          mkdir -p out conda-build
          env | grep -P "^AWS|^GITHUB" > env_file
          cat env_file
          docker run \
            --env-file env_file \
            -v "$(pwd)/out:/tmp/out" \
            -v "$(pwd)/conda-build:/tmp/conda-build" \
            --rm \
            -t legate.core \
            /bin/bash entrypoint build-all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "legate.core-gpu-${{ github.sha }}"
          path: |
            conda-build
            out

  test-gpu:
    needs:
      - build-gpu
    runs-on: linux-amd64-gpu-v100-latest-1
    container:
      options: -u root
      image: ghcr.io/nv-legate/legate.core
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
    steps:
      - name: Run nvidia-smi to make sure GPU is working
        run: nvidia-smi

      - name: Checkout legate.core
        uses: actions/checkout@v3
        with:
          repository: nv-legate/legate.core
          fetch-depth: 0
          path: legate

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: "legate.core-gpu-${{ github.sha }}"
          path: artifacts

      - name: Display structure of downloaded artifacts
        run: ls -R
        working-directory: artifacts

      - name: Setup
        shell: bash -eo pipefail {0}
        run: |
          cp -ar legate/continuous_integration/home/coder/.gitconfig /home/coder/
          cp -ar legate/continuous_integration/home/coder/.local /home/coder/
          mv legate /home/coder/legate

          chmod a+x /home/coder/.local/bin/*
          chown -R coder:coder /home/coder/
          mkdir -p /tmp/out
          chown -R coder:coder /tmp/out

      - name: Recreate the legate conda environment
        shell: bash -eo pipefail {0}
        run: |
          pattern="artifacts/out/*.yaml"
          files=( $pattern )
          yaml_file="${files[0]}"
          echo "YAML file: ${yaml_file}"

          mamba env create -n "${DEFAULT_CONDA_ENV:-legate}" -f "${yaml_file}";

      - name: Install legate-core and cunumeric in the legate conda environment
        shell: bash -eo pipefail {0}
        run: |
          mamba install -y -n legate -c $(pwd)/artifacts/conda-build/legate_core legate-core

      - if: inputs.test-scope == 'unit'
        name: Run legate.core unit tests
        shell: su coder {0}
        run: |
          cd ~/legate/tests/unit
          pytest